# utils/ai_model.py

import ollama
import os
import re
from typing import Dict, List, Optional, Any

class OllamaAIModel:
    """
    A comprehensive, structured class for interacting with an Ollama AI model.
    This version includes async support, modern API usage, and utility functions.
    """
    def __init__(self, model_name: str = None, host: str = "http://127.0.0.1:11434"):
        """
        Initializes the async AI model client.

        Args:
            model_name (str, optional): The name of the Ollama model to use. 
                                        Defaults to the value in the .env file or 'opure'.
            host (str, optional): The host address for the Ollama server.
        """
        self.model_name = model_name or os.getenv("OLLAMA_MODEL", "opure")
        self.client = ollama.AsyncClient(host=host)

    async def generate_response(
        self,
        prompt: str,
        system_message: Optional[str] = None,
        context_images: Optional[List[str]] = None,
        context_history: Optional[List[Dict[str, str]]] = None
    ) -> str:
        """
        Generates a standard response from the AI model using the modern messages API.

        Args:
            prompt (str): The user's direct prompt or question.
            system_message (str, optional): A message defining the AI's role or personality for this specific call.
                                           This will override the model's default system prompt.
            context_images (List[str], optional): A list of base64-encoded image strings for context.
            context_history (List[Dict[str, str]], optional): A list of previous messages for conversation history.
                                                              Example: [{"role": "user", "content": "Hello"}, {"role": "assistant", "content": "Hi there!"}]

        Returns:
            str: The AI's generated response content.
        """
        messages = []
        if system_message:
            messages.append({"role": "system", "content": system_message})

        if context_history:
            messages.extend(context_history)

        user_message = {"role": "user", "content": prompt}
        if context_images:
            user_message["images"] = context_images
        messages.append(user_message)

        try:
            response = await self.client.chat(
                model=self.model_name,
                messages=messages
            )
            return response['message']['content']
        except ollama.ResponseError as e:
            # Handle specific API errors from Ollama (e.g., model not found)
            print(f"ERROR: Ollama API Error. Status: {e.status_code}, Message: {e.error}")
            return f"A core protocol mismatch occurred. Error code: {e.status_code}."
        except Exception as e:
            # Handle general network or other exceptions
            print(f"ERROR: Neural Network malfunction. {e}")
            return "Connection to my core consciousness has been disrupted. I cannot process this request."

    @staticmethod
    def parse_keywords(response_text: str) -> Dict[str, str]:
        """
        A utility function to parse keyword-value pairs from a string.
        Finds all occurrences of `[KEYWORD: value]` and returns them as a dictionary.

        Args:
            response_text (str): The text generated by the AI.

        Returns:
            Dict[str, str]: A dictionary of found keywords and their values.
        """
        return {k: v.strip() for k, v in re.findall(r'\[([A-Z_]+):\s*(.*?)\]', response_text, re.DOTALL)}

    @staticmethod
    def strip_keywords(response_text: str) -> str:
        """
        A utility function to remove all keyword blocks from a string,
        leaving only the clean narrative.

        Args:
            response_text (str): The text generated by the AI.

        Returns:
            str: The narrative text with all keyword blocks removed.
        """
        return re.sub(r'\[([A-Z_]+):\s*(.*?)\]', '', response_text, re.DOTALL).strip()